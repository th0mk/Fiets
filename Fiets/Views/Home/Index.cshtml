@model IndexViewModel
@{
    ViewData["Title"] = "Home Page";
    @using System.Security.Claims;
}


    <div class="row">
        <div class="col-6 card">
            <div class="card-body">
                <h2 class="card-title">Leaderboard</h2>
                @if (Model.TopRides != null)
                {
                    foreach (var ride in Model.TopRides)
                    {
                        <p>@ride.User</p>
                        <p>@ride.KMDriven</p>
                        <p>@ride.TimeDriven</p>

                    }
                }
            </div>
        </div>
        <div class="col-5 offset-1 card">
            <div class="card-body">
                @if (User.Identity.IsAuthenticated)
                {
                    <div id="startRide" class="@if (Model.Riding) {<text>d-none</text>}">
                        <h4 class="card-title">Track your ride</h4>
                        <p>Starting KM:</p>

                        <div class="input-group">
                            <input type="number" id="startkm" />
                            <div class="input-group-append">
                                <input type="button" id="startride" value="Send" class="btn btn-outline-primary" />
                            </div>
                        </div>
                    </div>

                    <div id="endRide" class="@if (!Model.Riding) {<text>d-none</text>}">
                        <h4 class="card-title">End your ride</h4>
                        <p>End KM:</p>
                        <div class="input-group">
                            <input type="number" id="endkm" />
                            <div class="input-group-append">
                                <input type="button" id="endride" value="Send" class="btn btn-outline-primary" />
                            </div>
                        </div>
                    </div>


                }
                else
                {
                    <h4 class="card-title">Log in to track your rides</h4>
                }
                <br />
                <h4 class="card-title">Huidige ritjes</h4>


                <ul id="discussion" class="list-group">
                    @foreach (var item in Model.CurrentRides)
                    {
                        <li><strong>@item.User</strong> @item.RideStartKm</li>
                    }
                </ul>
            </div>
        </div>
    </div>

@section Scripts{
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            var startInput = document.getElementById('startkm');
            var endInput = document.getElementById('endkm');
            // Set initial focus to message input box.
            @if (Model.Riding){
                <text>startInput.focus();</text>
            }
            else
            {
                <text>endInput.focus();</text>
            }
            // Start the connection.
            var connection = new signalR.HubConnectionBuilder()
                .withUrl('/chat')
                .build();
            // Create a function that the hub can call to broadcast messages.
            connection.on('addRide', function (id, name, rideStartKm, utcStart) {
                // Html encode display name and message.
                var encodedName = name;
                var encodedMsg = utcStart;
                // Add the message to the page.
                var liElement = document.createElement('li');
                liElement.className = "list-group-item " + id;
                liElement.innerHTML = '<strong> Start ' + encodedName + '</strong>:&nbsp;&nbsp;' + encodedMsg;
                document.getElementById('discussion').appendChild(liElement);
            });
            // Create a function that the hub can call to broadcast messages.
            connection.on('removeRide', function (id, name, rideEndKm, utcEnd) {
                // Html encode display name and message.
                var encodedName = name;
                var encodedMsg = utcEnd;
                // Add the message to the page.
                var liElement = document.createElement('li');
                liElement.innerHTML = '<strong> End' + encodedName + '</strong>:&nbsp;&nbsp;' + encodedMsg;
                document.getElementById('discussion').appendChild(liElement);
            });
            // Transport fallback functionality is now built into start.
            connection.start()
                .then(function () {
                    console.log('connection started');
                    document.getElementById('startride').addEventListener('click', function (event) {
                        connection.invoke('StartRide' , '@User.FindFirstValue(ClaimTypes.NameIdentifier)', startInput.value);
                        $('#endRide').removeClass('d-none');
                        $('#startRide').addClass('d-none');
                        endInput.focus();
                        event.preventDefault();
                    });
                    document.getElementById('endride').addEventListener('click', function (event) {
                        connection.invoke('EndRide' , '@User.FindFirstValue(ClaimTypes.NameIdentifier)', endInput.value);
                        $('#endRide').addClass('d-none');
                        $('#startRide').removeClass('d-none');
                        startInput.focus();
                        event.preventDefault();
                    });
                })
                .catch(error => {
                    console.error(error.message);
                });
        });
    </script>
}